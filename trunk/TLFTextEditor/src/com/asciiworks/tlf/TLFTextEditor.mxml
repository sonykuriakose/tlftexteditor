<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
         xmlns:mx="library://ns.adobe.com/flex/mx" creationComplete="creationCompleteHandler(event)"
         xmlns:supportClasses="com.asciiworks.tlf.supportClasses.*">

    <s:layout>
        <s:VerticalLayout gap="0"/>
    </s:layout>

    <fx:Metadata>
		[Event(name="textFlowChanged",type="flash.events.Event")]
	</fx:Metadata>

    <fx:Script>
        <![CDATA[
            import com.asciiworks.tlf.supportClasses.Icons;
        ]]>
    </fx:Script>
    <fx:Script>
        <![CDATA[
            import flashx.textLayout.elements.FlowElement;
            import com.asciiworks.tlf.supportClasses.ContentDropDownListEvent;
            import spark.events.DropDownEvent;
            import com.asciiworks.tlf.supportClasses.ColorListSkin;

            import flashx.textLayout.conversion.ConversionType;
            import flashx.textLayout.conversion.TextConverter;
            import flashx.textLayout.edit.EditManager;
            import flashx.textLayout.elements.TextFlow;
            import flashx.textLayout.formats.ITextLayoutFormat;
            import flashx.textLayout.formats.TextLayoutFormat;

            import mx.events.ColorPickerEvent;
            import mx.events.FlexEvent;
            import mx.skins.spark.ColorPickerSkin;

            import spark.events.IndexChangeEvent;

            private var editManager:EditManager;

            //--------------------------------------------------------------------------
            //
            //  Properties
            //
            //--------------------------------------------------------------------------

            //--------------------------------------
            //  availableTextColors
            //--------------------------------------

            private var _availableTextColors:Array;

            public function get availableTextColors():Array {
                return _availableTextColors;
            }

            public function set availableTextColors(value:Array):void {
                if (_availableTextColors == value)
                    return;

                colorList.visible = value != null;
                colorList.includeInLayout = value != null;
                colorPicker.visible = value == null;
                colorPicker.includeInLayout = value == null;

                if (value)
                    colorList.dataProvider = new ArrayCollection(value);
            }

            //--------------------------------------
            //  initialTextColor
            //--------------------------------------

            private var _initialTextColor:uint = 0x000000;

            public function get initialTextColor():uint {
                return _initialTextColor;
            }

            public function set initialTextColor(value:uint):void {
                if (_initialTextColor == value)
                    return;

                if (editManager) {
                    var colorStyle:TextLayoutFormat = new TextLayoutFormat();
                    colorStyle.color = value;
                    editManager.applyLeafFormat(colorStyle);
                }

                _initialTextColor = value;
            }

            //--------------------------------------
            //  lineHeight
            //--------------------------------------

            private var _lineHeight:Object;

            public function get lineHeight():Object {
                return _lineHeight;
            }

            public function set lineHeight(value:Object):void {
                if (_lineHeight == value)
                    return;

                if (editManager) {
                    var containerStyle:TextLayoutFormat = new TextLayoutFormat();
                    containerStyle.lineHeight = value;
                    editManager.applyContainerFormat(containerStyle);
                }

                _lineHeight = value;
            }

            //--------------------------------------
            //  textAreaBackgroundColor
            //--------------------------------------

            public function get textAreaBackgroundColor():uint {
                return display.getStyle("backgroundColor");
            }

            public function set textAreaBackgroundColor(value:uint):void {
                display.setStyle("backgroundColor", value);
            }

            //--------------------------------------
            //  textFlow
            //--------------------------------------

            [Bindable(event="textFlowChanged")]

            public function get textFlow():TextFlow {
                return display.textFlow.deepCopy() as TextFlow;
            }

            public function set textFlow(value:TextFlow):void {
                if (display.textFlow == value)
                    return;

                display.textFlow = value;
                updateEditManager();
                dispatchEvent(new Event('textFlowChanged'));
            }

            //--------------------------------------
            //  textFlowMarkup
            //--------------------------------------

            [Bindable(event="textFlowChanged")]

            public function get textFlowMarkup():String {
                return TextConverter.export(display.textFlow, TextConverter.TEXT_LAYOUT_FORMAT, ConversionType.STRING_TYPE) as String;
            }

            public function set textFlowMarkup(value:String):void {
                var flow:TextFlow = TextConverter.importToFlow(value, TextConverter.TEXT_LAYOUT_FORMAT);

                if (display.textFlow == flow)
                    return;

                display.textFlow = flow;
                updateEditManager();
                dispatchEvent(new Event('textFlowChanged'));
            }

            //--------------------------------------------------------------------------
            //
            //  Methods
            //
            //--------------------------------------------------------------------------

            private function updateEditManager():void {
                editManager = display.textFlow.interactionManager as EditManager;

                // reset initial text color
                var colorStyle:TextLayoutFormat = new TextLayoutFormat();
                colorStyle.color = initialTextColor;
                editManager.applyLeafFormat(colorStyle);
                colorList.selectedItem = initialTextColor;
                colorPicker.selectedColor = initialTextColor;

                // reset line height
                var containerStyle:TextLayoutFormat = new TextLayoutFormat();
                containerStyle.lineHeight = lineHeight;
                editManager.applyParagraphFormat(containerStyle);
            }

            //--------------------------------------------------------------------------
            //
            //  Event handlers
            //
            //--------------------------------------------------------------------------

            private function creationCompleteHandler(event:Event):void {
                colorList.addEventListener(DropDownEvent.CLOSE, list_closeHandler);
                fontSize.addEventListener(DropDownEvent.CLOSE, list_closeHandler);
                fontFamily.addEventListener(DropDownEvent.CLOSE, list_closeHandler);
                updateEditManager();
                dispatchEvent(new Event('textFlowChanged'));
            }

            private function bold_clickHandler(event:MouseEvent):void {
                var boldFormat:TextLayoutFormat = new TextLayoutFormat();
                boldFormat.fontWeight = bold.selected ? "bold" : "normal";
                editManager.applyLeafFormat(boldFormat);
                display.setFocus();
            }

            private function italic_clickHandler(event:MouseEvent):void {
                var italicFormat:TextLayoutFormat = new TextLayoutFormat();
                italicFormat.fontStyle = italic.selected ? "italic" : "normal";
                editManager.applyLeafFormat(italicFormat);
                display.setFocus();
            }

            private function underline_clickHandler(event:MouseEvent):void {
                var underlineFormat:TextLayoutFormat = new TextLayoutFormat();
                underlineFormat.textDecoration = underline.selected ? "underline" : "none";
                editManager.applyLeafFormat(underlineFormat);
                display.setFocus();
            }

            private function fontSize_changeHandler(event:IndexChangeEvent):void {
                var item:Object = event.currentTarget.selectedItem;
                var fontStyle:TextLayoutFormat = new TextLayoutFormat();
                fontStyle.fontSize = item;
                editManager.applyLeafFormat(fontStyle);
            }

            private function fontFamily_changeHandler(event:IndexChangeEvent):void {
                var item:Object = event.currentTarget.selectedItem;
                var fontStyle:TextLayoutFormat = new TextLayoutFormat();
                fontStyle.fontFamily = item;
                editManager.applyLeafFormat(fontStyle);
            }

            private function link_submitHandler(event:ContentDropDownListEvent):void {
                var link:Object = event.payload;
                var colorStyle:TextLayoutFormat = new TextLayoutFormat();
                colorStyle.color = 0xFFD87D;
                editManager.clearFormat(colorStyle, null, null);
                editManager.applyLink(link.url, link.destinationWindow, true);
                display.setFocus();
            }

            private function unlink_clickHandler(event:MouseEvent):void {
                // clear the link
                editManager.applyLink("", null, true);

                // Set color, first try to set it same as the element before the link,
                // if it exists.  If not, use the initialTextColor.
                var start:int = editManager.getSelectionState().absoluteStart;
                var previousEl:FlowElement = editManager.textFlow.findLeaf(start - 1);
                var colorStyle:TextLayoutFormat = new TextLayoutFormat();
                colorStyle.color = previousEl ? previousEl.color : initialTextColor;
                editManager.applyLeafFormat(colorStyle);

                display.setFocus();
            }

            private function image_submitHandler(event:ContentDropDownListEvent):void {
				var payload:Object = event.payload;
                editManager.insertInlineGraphic(payload.url, payload.width, payload.height);
            }

            private function colorPicker_changeHandler(event:Event):void {
                var colorFormat:Object;
                if (event is ColorPickerEvent)
                    colorFormat = event.currentTarget.selectedColor;
                else if (event is IndexChangeEvent)
                    colorFormat = event.currentTarget.selectedItem;

                var colorStyle:TextLayoutFormat = new TextLayoutFormat();
                colorStyle.color = colorFormat;
                editManager.applyLeafFormat(colorStyle);
            }

            private function list_closeHandler(event:DropDownEvent):void {
                display.setFocus();
            }

            private function display_selectionChangeHandler(event:FlexEvent):void {
                if (!editManager)
                    return;

                var format:ITextLayoutFormat = editManager.getCommonCharacterFormat();

                // bold, italic, underline
                var boldFormat:* = format.fontWeight;
                bold.selected = boldFormat == "bold";
                var italicFormat:* = format.fontStyle;
                italic.selected = italicFormat == "italic";
                var underlineFormat:* = format.textDecoration;
                underline.selected = underlineFormat == "underline";

                // font size
                var size:* = format.fontSize;
                if (size == undefined)
                    fontSize.selectedIndex = -1;
                else
                    fontSize.selectedItem = format.fontSize;

                // font family
                var family:* = format.fontFamily;
                if (family == undefined)
                    fontFamily.selectedIndex = -1;
                else
                    fontFamily.selectedItem = format.fontFamily;

                // color
                var colorFormat:* = format.color;
                if (colorFormat == undefined) {
                    colorPicker.selectedColor = 0x000000;
                    colorList.selectedItem = null;
                } else {
                    colorPicker.selectedColor = colorFormat;
                    colorList.selectedItem = colorFormat;
                }
            }
        ]]>
    </fx:Script>

    <s:Group id="toolbar" width="100%">
        <s:layout>
            <s:HorizontalLayout gap="0"/>
        </s:layout>
        <s:ToggleButton id="bold" width="23" height="23" cornerRadius="0"
                        click="bold_clickHandler(event)"
                        skinClass="com.asciiworks.tlf.supportClasses.IconToggleButtonSkin"
                        content="{Icons.getIcon(3)}" toolTip="Bold"/>
        <s:ToggleButton id="italic" width="23" height="23" cornerRadius="0"
                        click="italic_clickHandler(event)"
                        skinClass="com.asciiworks.tlf.supportClasses.IconToggleButtonSkin"
                        content="{Icons.getIcon(7)}" toolTip="Italic"/>
        <s:ToggleButton id="underline" width="23" height="23" cornerRadius="0"
                        click="underline_clickHandler(event)"
                        skinClass="com.asciiworks.tlf.supportClasses.IconToggleButtonSkin"
                        content="{Icons.getIcon(19)}" toolTip="Underline"/>
        <s:Button width="23" height="23" cornerRadius="0" click=";"
                  skinClass="com.asciiworks.tlf.supportClasses.IconButtonSkin"
                  content="{Icons.getIcon(18)}" toolTip="Bulleted list"/>
        <s:Button width="23" height="23" cornerRadius="0" click=";"
                  skinClass="com.asciiworks.tlf.supportClasses.IconButtonSkin"
                  content="{Icons.getIcon(10)}" toolTip="Numerical list"/>
        <s:ComboBox id="fontSize" width="50" cornerRadius="0" selectedItem="12"
                    change="fontSize_changeHandler(event)" toolTip="Font size"
                    dataProvider="{new ArrayCollection([6,7,8,9,10,11,12,13,14,15,16,18,20,22,24,26,28,32,36,40,44,48,54,60,66,72,80,88,96])}"/>
        <s:ComboBox id="fontFamily" width="100" cornerRadius="0" selectedIndex="0"
                    change="fontFamily_changeHandler(event)" toolTip="Font family">
            <s:dataProvider>
                <s:ArrayCollection>
                    <fx:Object>Arial</fx:Object>
                    <fx:Object>Courier</fx:Object>
                    <fx:Object>Courier New</fx:Object>
                    <fx:Object>Geneva</fx:Object>
                    <fx:Object>Georgia</fx:Object>
                    <fx:Object>Helvetica</fx:Object>
                    <fx:Object>Times New Roman</fx:Object>
                    <fx:Object>Times</fx:Object>
                    <fx:Object>Verdana</fx:Object>
                </s:ArrayCollection>
            </s:dataProvider>
        </s:ComboBox>
        <mx:ColorPicker id="colorPicker" height="23" color="0x000000"
                        change="colorPicker_changeHandler(event)" toolTip="Text color"/>
        <supportClasses:ColorList id="colorList" width="50" height="23" visible="false"
                                  includeInLayout="false"
                                  skinClass="com.asciiworks.tlf.supportClasses.ColorListSkin"
                                  itemRenderer="com.asciiworks.tlf.supportClasses.ColorListItemRenderer"
                                  selectedIndex="0" change="colorPicker_changeHandler(event)"
                                  toolTip="Text color"/>
        <supportClasses:ContentDropDownList width="23" height="23" cornerRadius="0"
                                            submit="link_submitHandler(event)"
                                            skinClass="com.asciiworks.tlf.supportClasses.LinkDropDownListSkin"
                                            content="{Icons.getIcon(21)}" toolTip="Link"/>
        <s:Button width="23" height="23" cornerRadius="0" click="unlink_clickHandler(event)"
                  skinClass="com.asciiworks.tlf.supportClasses.IconButtonSkin"
                  content="{Icons.getIcon(22)}" toolTip="Remove link"/>
        <supportClasses:ContentDropDownList width="23" height="23" cornerRadius="0"
                                            submit="image_submitHandler(event)"
                                            skinClass="com.asciiworks.tlf.supportClasses.ImageDropDownListSkin"
                                            content="{Icons.getIcon(20)}" toolTip="Insert image"/>
    </s:Group>

    <s:RichEditableText id="display" width="100%" height="{Math.max(200,display.contentHeight)}"
                        change="dispatchEvent(new Event('textFlowChanged'));"
                        selectionChange="display_selectionChangeHandler(event)"
                        creationComplete="display.setFocus();"/>

</s:Group>
